# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

env:
  S3_BUCKET_NAME: springboot2-bucket # S3 버킷이름
  PROJECT_NAME: springboot2-webservice # Git Hub 프로젝트 이름
  CODE_DEPLOY_APP_NAME: springboot2-webservice # CodeDeploy 애플리케이션 이름
  CODE_DEPLOY_GROUP_NAME: springboot2-webservice-group # CodeDeploy 배포 그룹 이름

name: deploy # Github Action에서 보여질 이름을 지정

on:
  release:
    types: [push] # push시 자동으로 실행
  push:
    branches: [master] # master 브랜치에서 동작
  workflow_dispatch: # 수동으로 실행이 가능하다.

jobs:
  build:
    runs-on: ubuntu-latest # 해당 스크립트를 작동할 OS
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3 # 프로젝트 코드를 Checkout한다.

    - name: Set up JDK 8
      uses: actions/setup-java@v3 # Github Action이 실행될 OS에 Java를 설치한다
      with: # 현 프로젝트는 자바 1.8버전이므로 1.8버전으로 진행한다.
        java-version: '8'
        distribution: 'temurin'

    - name : Grant execute permission for gradlew
      run: chmod +x ./gradlew # gradlew를 실행 할 수 있도록 실행권한 (+x)를 준다.
      shell: bash

    - name: Build with Gradle
      run: ./gradlew clean -x test build  # gradlew를 통해 프로젝트를 build한다.
      shell: bash

    - name: Get current time # 빌드한 날짜를 한국시간에 맞게 설정
      uses: 1466587594/get-current-time@v2
      id: current-time
      with: # 해당 action의 기준이 UTC이므로 한국시간인 KTC로 바꾸기위해 #offset +09:00
        format: YYYY-MM-DDTHH-mm-ss
        utcOffset: "+09:00"

    - name: Show Current Time # 지정한 포맷대로 현재 시간을 보여준다.
      run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"
      shell: bash

    - name: Generate deployment package # 배포할 파일 압축해서 옮기기
      run: | # before-deploy 에 파일 저장 -> zip 압축 -> 상위 디렉토리 이동 -> deploy로 파일이동
        mkdir -p before-deploy 
        cp scripts/*.sh before-deploy/
        cp appspec.yml before-deploy/
        cp build/libs/*.jar before-deploy/
        cd before-deploy && zip -r before-deploy *
        cd ../ && mkdir -p deploy
        mv before-deploy/before-deploy.zip deploy/$PROJECT_NAME.zip
      shell: bash

    - name: Make zip file # 프로젝트 이름으로 해당 폴더를 모두 압축시킨다. (빌드된 전체 폴더)
      run: zip -r ./$PROJECT_NAME.zip .
      shell: bash

    - name: Configure AWS credentials # aws에 해당 키값으로 접속을 진행한다.
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Upload to S3 # AWS S3에 프로젝트 이름에 해당하는 폴더에 zip파일을 저장한다.
      run: aws s3 cp --region ap-northeast-2 ./deploy/$PROJECT_NAME.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$PROEJCT_NAME.zip

    - name: Code Deploy # CodeDeploy로 배포 실행
      run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $CODE_DEPLOY_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$PROJECT_NAME.zip